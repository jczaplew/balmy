{"version":3,"sources":["icons/partly_cloudy.svg","icons/partly_cloudy_windy.svg","icons/rain.svg","icons/sun_thunderstorm.svg","icons/sun.svg","icons/mostly_cloudy.svg","icons/cloudy.svg","icons/snow.svg","icons/sunny_rain.svg","icons/thunderstorm.svg","util/index.tsx","icons.tsx","ForecastCard.tsx","Forecast.tsx","util/getCardinalDirection.tsx","CurrentConditions.tsx","WeatherLine.tsx","HourlyGraphs.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","CtoF","d","Math","round","metersPerSecondToMph","m","parseIcon","iconUrl","replace","split","slice","map","icon","percent","parseInt","sort","a","b","Sun","PartlyCloudy","MostlyCloudy","Cloudy","PartlyCloudyWindy","Snow","Rain","SunnyRain","Thunderstorm","SunThunderstorm","ForecastCard","period","Card","style","margin","width","height","display","CardContent","Typography","variant","name","moment","startTime","format","alignItems","justifyContent","src","alt","textAlign","marginLeft","paddingTop","paddingBottom","color","maxTemp","minTemp","fontWeight","windSpeed","windDirection","shortForecast","Forecast","useState","forecast","setForecast","isMobile","useMediaQuery","fetch","then","res","json","response","periods","properties","startDayOfTheWeek","temps","isDaytime","filter","p","endTime","temperature","minMaxTemps","min","max","parsedIcons","startDay","endDayOfTheWeek","endDay","length","precip","icons","useEffect","fetchForecast","overflowX","day","Table","TableBody","i","TableRow","key","TableCell","padding","detailedForecast","getCardinalDirection","heading","CurrentConditions","undefined","currentConditions","setCurrentConditions","windChill","value","heatIndex","fetchCurrentConditions","feelsLike","transform","marginRight","windGust","CurrentDetails","size","className","relativeHumidity","dewpoint","visibility","barometricPressure","WeatherLine","axisBottom","axisLeft","props","top","right","bottom","left","xScale","type","precision","xFormat","yFormat","yScale","stacked","reverse","curve","axisTop","axisRight","tickValues","legendOffset","orient","tickSize","tickPadding","tickRotation","legendPosition","colors","scheme","lineWidth","enablePoints","enableArea","areaOpacity","useMesh","enableSlices","sliceTooltip","paddingLeft","paddingRight","backgroundColor","border","points","data","yFormatted","x","HourlyGraphs","hourlyForecast","setHourlyForecast","hourly","values","validTime","toDate","y","skyCover","probabilityOfPrecipitation","fetchHourlyForecast","times","minDay","startOf","add","range","diff","days","push","clone","areaBaselineValue","legend","App","maxWidth","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.99b95894.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/partly_cloudy.34484b54.svg\";","module.exports = __webpack_public_path__ + \"static/media/partly_cloudy_windy.0bcd5b3f.svg\";","module.exports = __webpack_public_path__ + \"static/media/rain.633504b6.svg\";","module.exports = __webpack_public_path__ + \"static/media/sun_thunderstorm.98a13764.svg\";","module.exports = __webpack_public_path__ + \"static/media/sun.c536ba25.svg\";","module.exports = __webpack_public_path__ + \"static/media/mostly_cloudy.7ee35f1f.svg\";","module.exports = __webpack_public_path__ + \"static/media/cloudy.72925540.svg\";","module.exports = __webpack_public_path__ + \"static/media/snow.7f879cdd.svg\";","module.exports = __webpack_public_path__ + \"static/media/sunny_rain.bdf06b84.svg\";","module.exports = __webpack_public_path__ + \"static/media/thunderstorm.48b7e66b.svg\";","\nexport function CtoF(d: number) {\n    return Math.round((d * 9/5) + 32);\n}\n\nexport function metersPerSecondToMph(m: number) {\n    return Math.round(m * 2.23694)\n}\n\nexport function metersToMiles(m: number) {\n    return Math.round(m * 0.0006213712);\n}\n\nexport function parseIcon(iconUrl: string) {\n    return iconUrl\n        .replace('https://api.weather.gov/icons/', '')\n        .split('?')[0]\n        .split('/')\n        .slice(2)\n        .map(d => d.split(','))\n        .map(d => { return {icon: d[0], percent: parseInt(d[1]) }})\n        .sort((a, b) => b.percent - a.percent);\n}\n","import Sun from './icons/sun.svg';\nimport PartlyCloudy from './icons/partly_cloudy.svg';\nimport MostlyCloudy from './icons/mostly_cloudy.svg';\nimport Cloudy from './icons/cloudy.svg';\nimport PartlyCloudyWindy from './icons/partly_cloudy_windy.svg';\nimport Snow from './icons/snow.svg';\nimport Rain from './icons/rain.svg';\nimport SunnyRain from './icons/sunny_rain.svg';\nimport Thunderstorm from './icons/thunderstorm.svg';\nimport SunThunderstorm from './icons/sun_thunderstorm.svg';\n\n// https://thenounproject.com/anusha.narvekar/collection/weather/\nexport default {\n    \"skc\": {\n        \"description\": \"Fair/clear\",\n        \"icon\": Sun,\n    },\n    \"few\": {\n        \"description\": \"A few clouds\",\n        \"icon\": PartlyCloudy,\n    },\n    \"sct\": {\n        \"description\": \"Partly cloudy\",\n        \"icon\": PartlyCloudy,\n    },\n    \"bkn\": {\n        \"description\": \"Mostly cloudy\",\n        \"icon\": MostlyCloudy,\n    },\n    \"ovc\": {\n        \"description\": \"Overcast\",\n        \"icon\": Cloudy,\n    },\n    \"wind_skc\": {\n        \"description\": \"Fair/clear and windy\"\n    },\n    \"wind_few\": {\n        \"description\": \"A few clouds and windy\",\n        \"icon\": PartlyCloudyWindy,\n    },\n    \"wind_sct\": {\n        \"description\": \"Partly cloudy and windy\",\n        \"icon\": PartlyCloudyWindy,\n    },\n    \"wind_bkn\": {\n        \"description\": \"Mostly cloudy and windy\"\n    },\n    \"wind_ovc\": {\n        \"description\": \"Overcast and windy\"\n    },\n    \"snow\": {\n        \"description\": \"Snow\",\n        \"icon\": Snow,\n    },\n    \"rain_snow\": {\n        \"description\": \"Rain/snow\"\n    },\n    \"rain_sleet\": {\n        \"description\": \"Rain/sleet\"\n    },\n    \"snow_sleet\": {\n        \"description\": \"Rain/sleet\"\n    },\n    \"fzra\": {\n        \"description\": \"Freezing rain\"\n    },\n    \"rain_fzra\": {\n        \"description\": \"Rain/freezing rain\"\n    },\n    \"snow_fzra\": {\n        \"description\": \"Freezing rain/snow\"\n    },\n    \"sleet\": {\n        \"description\": \"Sleet\"\n    },\n    \"rain\": {\n        \"description\": \"Rain\",\n        \"icon\": Rain,\n    },\n    \"rain_showers\": {\n        \"description\": \"Rain showers (high cloud cover)\",\n        \"icon\": Rain,\n    },\n    \"rain_showers_hi\": {\n        \"description\": \"Rain showers (low cloud cover)\",\n        \"icon\": SunnyRain,\n    },\n    \"tsra\": {\n        \"description\": \"Thunderstorm (high cloud cover)\",\n        \"icon\": Thunderstorm,\n    },\n    \"tsra_sct\": {\n        \"description\": \"Thunderstorm (medium cloud cover)\",\n        \"icon\": SunThunderstorm,\n    },\n    \"tsra_hi\": {\n        \"description\": \"Thunderstorm (low cloud cover)\",\n        \"icon\": SunThunderstorm,\n    },\n    \"tornado\": {\n        \"description\": \"Tornado\"\n    },\n    \"hurricane\": {\n        \"description\": \"Hurricane conditions\"\n    },\n    \"tropical_storm\": {\n        \"description\": \"Tropical storm conditions\"\n    },\n    \"dust\": {\n        \"description\": \"Dust\"\n    },\n    \"smoke\": {\n        \"description\": \"Smoke\"\n    },\n    \"haze\": {\n        \"description\": \"Haze\"\n    },\n    \"hot\": {\n        \"description\": \"Hot\"\n    },\n    \"cold\": {\n        \"description\": \"Cold\"\n    },\n    \"blizzard\": {\n        \"description\": \"Blizzard\"\n    },\n    \"fog\": {\n        \"description\": \"Fog/mist\"\n    }\n}","import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport {Typography} from '@material-ui/core';\nimport {MyForecastPeriod} from './types/ForecastPeriod';\nimport moment from 'moment';\n\nexport default function ForecastCard({period}: {period: MyForecastPeriod}) {\n    return <Card style={{margin: '8px', width: '230px', height: '175px', display: 'inline-block'}}>\n        <CardContent>\n            <Typography variant='subtitle1'>\n               {period.name} {moment(period.startTime).format('MMM D')}\n            </Typography>\n\n            <div style={{\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n            }}>\n\n                <div style={{display: 'inline-block'}}>\n                    <img src={period.icon} style={{height: '45px'}} alt=''/>\n                </div>\n\n                <div style={{display: 'inline-block', textAlign: 'left', marginLeft: '16px', paddingTop: '8px', paddingBottom: '8px'}}>\n                    <Typography variant='h6'>\n                        <span style={{color: '#d5202a'}}>{period.maxTemp}</span>°{' | '}\n                        <span style={{color: '#0053ae'}}>{period.minTemp}</span>°<span style={{fontWeight: 400}}>F</span>\n                    </Typography>\n\n                    <Typography variant='body2'>\n                        {period.windSpeed} {period.windDirection}\n                    </Typography>\n                </div>\n\n            </div>\n\n            <Typography variant='body2'>{period.shortForecast}</Typography>\n        </CardContent>\n    </Card>\n}","import React, {useState, useEffect} from 'react';\nimport moment from 'moment';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport {Typography} from '@material-ui/core';\nimport {ForecastPeriod, MyForecastPeriod} from './types/ForecastPeriod';\nimport {parseIcon} from './util';\nimport icons from './icons';\nimport ForecastCard from './ForecastCard';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\n\nexport default function Forecast() {\n    const [forecast, setForecast] = useState<MyForecastPeriod[]>([]);\n    const isMobile = useMediaQuery('(max-width: 500px)');\n\n    async function fetchForecast() {\n        const response = await fetch('https://api.weather.gov/gridpoints/MPX/109,70/forecast')\n          .then(res => res.json());\n\n        const periods: MyForecastPeriod[] = response.properties.periods.map((period: ForecastPeriod) => {\n          // Get min/max temp for that day\n          const startDayOfTheWeek = moment(period.startTime).format('ddd');\n\n          let temps = []\n          if (period.isDaytime) {\n            temps = response.properties.periods.filter((p:any) => {\n              if (\n                moment(p.startTime).format('ddd') === startDayOfTheWeek ||\n                moment(p.endTime).format('ddd') === startDayOfTheWeek\n              ) {\n                return p\n              }\n              return false\n            }).map((p: any) => p.temperature);\n          }\n          const minMaxTemps = !temps ? {} : {\n            minTemp: Math.min(...temps),\n            maxTemp: Math.max(...temps),\n          }\n\n          const parsedIcons = parseIcon(period.icon);\n\n          return {\n            ...period,\n            startDayOfTheWeek,\n            startDay: moment(period.startTime).format('M/D'),\n            endDayOfTheWeek: moment(period.endTime).format('ddd'),\n            endDay: moment(period.endTime).format('M/D'),\n            ...(parsedIcons.length && parsedIcons[0].percent ? {precip: parsedIcons[0].percent} : {}),\n            ...minMaxTemps,\n            ...(parsedIcons ? {icon: (icons as any)[parsedIcons[0].icon]?.icon || period.icon} : {icon: period.icon} ),\n\n          }\n        });\n\n\n        setForecast(periods.filter((period: MyForecastPeriod) => period.isDaytime));\n      }\n\n    useEffect(() => {\n        fetchForecast();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    if (!forecast) return null;\n\n    return <>\n        <div style={{overflowX: 'scroll'}}>\n            <div style={{width: '2000px', display: 'flex', paddingTop: '16px', paddingBottom: '16px'}}>\n                {forecast.map(day => <ForecastCard period={day}/>)}\n            </div>\n            {/* <div>\n                {forecast.map(day => {\n                return <div style={{display: 'inline-block', padding: '8px', fontSize: '12px'}} key={day.number}>\n                    <Typography variant='h5'>{day.startDayOfTheWeek} {day.startDay}</Typography>\n                    {day.minTemp &&\n                    <Typography variant='body1'>\n                        <span style={{color: '#d5202a'}}>{day.maxTemp}</span>°{' | '}\n                        <span style={{color: '#0053ae'}}>{day.minTemp}</span>°<span style={{fontWeight: 400}}>F</span>\n                    </Typography>\n                    }\n                    <img src={day.icon} style={{height: '80px'}} alt=''/>\n                    {day.precip && <p>Precip: {day.precip}%</p>}\n                </div>\n                })}\n            </div> */}\n        </div>\n        <Table>\n            <TableBody>\n            {forecast.map((day, i) => {\n            return <TableRow key={i}>\n                <TableCell style={{padding: isMobile ? '10px' : '16px'}}>\n                    <Typography variant='body2'>{day.startDayOfTheWeek} {day.startDay}</Typography>\n                </TableCell>\n                <TableCell style={{padding: isMobile ? '10px' : '16px'}}>\n                    <Typography variant='body2'>\n                        <span style={{color: '#d5202a'}}>{day.maxTemp}</span>°{' | '}\n                        <span style={{color: '#0053ae'}}>{day.minTemp}</span>°\n                        <span style={{fontWeight: 400}}>F</span>\n                    </Typography>\n                </TableCell>\n                <TableCell style={{padding: isMobile ? '10px' : '16px'}}>\n                    <Typography variant='body2'>{day.windSpeed} {day.windDirection}</Typography>\n                </TableCell>\n                {!isMobile && <TableCell style={{width: '50%', textAlign: 'left', padding: isMobile ? '10px' : '16px'}}>\n                    <Typography variant='body1'>{day.detailedForecast}</Typography>\n                </TableCell>}\n            </TableRow>\n            })}\n            </TableBody>\n        </Table>\n    </>\n}","  export default function getCardinalDirection(heading: number) {\n    // Principle winds + half-winds defintions via https://en.wikipedia.org/wiki/Points_of_the_compass\n    // 22.49deg between each step\n    switch(true) {\n      case (heading >= 348.76 || heading <= 11.25):\n        return 'N'\n      case heading >= 11.26 && heading <= 33.75:\n        return 'NNE'\n      case heading >= 33.76 && heading <= 56.25:\n        return 'NE'\n      case heading >= 56.26 && heading <= 78.75:\n        return 'ENE'\n      case heading >= 78.76 && heading <= 101.25:\n        return 'E'\n      case heading >= 101.26 && heading <= 123.75:\n        return 'ESE'\n      case heading >= 123.76 && heading <= 146.25:\n        return 'SE'\n      case heading >= 146.26 && heading <= 168.75:\n        return 'SSE'\n      case heading >= 168.76 && heading <= 191.25:\n        return 'S'\n      case heading >= 191.26 && heading <= 213.75:\n        return 'SSW'\n      case heading >= 213.76 && heading <= 236.25:\n        return 'SW'\n      case heading >= 236.26 && heading <= 258.75:\n        return 'WSW'\n      case heading >= 258.76 && heading <= 281.25:\n        return 'W'\n      case heading >= 281.26 && heading <= 303.75:\n        return 'WNW'\n      case heading >= 303.76 && heading <= 326.25:\n        return 'NW'\n      case heading >= 326.26 && heading <= 348.75:\n        return 'NNW'\n      default:\n        return 'N/A'\n    }\n  }","import React, {useState, useEffect} from 'react';\nimport {Typography} from '@material-ui/core';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport NavigationIcon from '@material-ui/icons/Navigation';\nimport {CtoF, metersToMiles, metersPerSecondToMph, parseIcon} from './util';\nimport getCardinalDirection from './util/getCardinalDirection';\nimport icons from './icons';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\n\nexport default function CurrentConditions() {\n    const [currentConditions, setCurrentConditions] = useState<any>(undefined);\n    const isMobile = useMediaQuery('(max-width: 500px)');\n\n    async function fetchCurrentConditions() {\n        const response = await fetch('http://api.weather.gov/stations/KMSP/observations/latest')\n          .then(res => res.json())\n\n        const parsedIcons = parseIcon(response.properties.icon);\n        if (parsedIcons) {\n          response.properties.icon = (icons as any)[parsedIcons[0]?.icon].icon;\n        }\n\n        response.properties['feelsLike'] = currentConditions?.properties.windChill.value || currentConditions?.properties.heatIndex.value;\n        setCurrentConditions(response.properties);\n      }\n\n    useEffect(() => {\n        fetchCurrentConditions();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    if (!currentConditions) return null;\n\n    return <div>\n    <div style={{\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'space-evenly',\n        padding: isMobile ? 0 : '40px',\n    }}>\n        <div>\n            <img\n                src={currentConditions.icon}\n                style={{width: isMobile ? '130px': '175px'}}\n                alt=''\n            />\n        </div>\n        <div>\n            <Typography variant={isMobile ? 'h2': 'h1'}>\n                {CtoF(currentConditions.temperature.value)}°F\n            </Typography>\n            {currentConditions.feelsLike && <Typography variant='h5'>\n                Feels like {CtoF(currentConditions.feelsLike)}°F\n            </Typography>}\n            {!isMobile && <div>\n                <Typography variant='h3' style={{display: 'inline-block'}}>\n                    <NavigationIcon style={{\n                        transform: `rotate(${currentConditions.windDirection.value - 180}deg)`,\n                        marginRight: '8px',\n                    }}/>\n                    {metersPerSecondToMph(currentConditions.windSpeed.value)}\n                    {currentConditions.windGust.value ?\n                    ' | ' + metersPerSecondToMph(currentConditions.windGust.value) : ''}\n                </Typography>\n                <Typography variant='h5' style={{display: 'inline-block', marginLeft: '8px'}}>mph</Typography>\n                <Typography variant='h5'  style={{display: 'inline-block', marginLeft: '8px'}}>\n                    {getCardinalDirection(currentConditions.windDirection.value)}\n                </Typography>\n            </div>}\n        </div>\n\n        {!isMobile && <CurrentDetails currentConditions={currentConditions} /> }\n    </div>\n        {isMobile && <CurrentDetails currentConditions={currentConditions} /> }\n    </div>;\n}\n\nfunction CurrentDetails({currentConditions}: {currentConditions: any}) {\n    if (!currentConditions) return null\n    return <div>\n        <Table size=\"small\" >\n            <TableBody>\n                <TableRow className='mobile-wind'>\n                    <TableCell>\n                        <Typography variant='subtitle2'>Wind</Typography>\n                    </TableCell>\n                    <TableCell>\n                        <Typography variant='body2'>\n                            {metersPerSecondToMph(currentConditions.windSpeed.value)} mph {getCardinalDirection(currentConditions.windDirection.value)}\n                        </Typography>\n                    </TableCell>\n                </TableRow>\n                {currentConditions.windGust.value && <TableRow className='mobile-wind'>\n                    <TableCell>\n                        <Typography variant='subtitle2'>Gusting</Typography>\n                    </TableCell>\n                    <TableCell>\n                        <Typography variant='body2'>\n                            {metersPerSecondToMph(currentConditions.windGust.value)} mph\n                        </Typography>\n                    </TableCell>\n                </TableRow>}\n\n            <TableRow>\n                <TableCell>\n                <Typography variant='subtitle2'>Humidity</Typography>\n                </TableCell>\n                <TableCell>\n                <Typography variant='body2'>{\n                    Math.round(currentConditions.relativeHumidity.value)\n                }%</Typography>\n                </TableCell>\n            </TableRow>\n\n            <TableRow>\n                <TableCell>\n                <Typography variant='subtitle2'>Dew Point</Typography>\n                </TableCell>\n                <TableCell>\n                <Typography variant='body2'>{\n                    CtoF(currentConditions.dewpoint.value)\n                }°F</Typography>\n                </TableCell>\n            </TableRow>\n\n            <TableRow>\n                <TableCell>\n                <Typography variant='subtitle2'>Visiblity</Typography>\n                </TableCell>\n                <TableCell>\n                <Typography variant='body2'>{\n                    metersToMiles(currentConditions.visibility.value)\n                } mi</Typography>\n                </TableCell>\n            </TableRow>\n\n            <TableRow>\n                <TableCell>\n                <Typography variant='subtitle2'>Pressure</Typography>\n                </TableCell>\n                <TableCell>\n                <Typography variant='body2'>{\n                    Math.round(currentConditions.barometricPressure.value * 0.01)\n                } mb</Typography>\n                </TableCell>\n            </TableRow>\n\n            </TableBody>\n        </Table>\n    </div>\n}","import React from 'react';\nimport {ResponsiveLine, LineSvgProps} from '@nivo/line';\nimport {Typography} from '@material-ui/core';\nimport moment from 'moment';\n\ninterface WeatherLine extends LineSvgProps {\n    areaBaselineValue?: number;\n}\n\nexport default function WeatherLine({axisBottom, axisLeft, ...props}: WeatherLine) {\n    return <ResponsiveLine\n        margin={{ top: 20, right: 20, bottom: 50, left: 50 }}\n        xScale={{\n            type: 'time',\n            format: 'native',\n            precision: 'day',\n        }}\n        xFormat=\"time:%m/%d %H:00\"\n        yFormat={(value) => `${value}°F`}\n        yScale={{ type: 'linear', min: 'auto', max: 'auto', stacked: true, reverse: false }}\n        curve='monotoneX'\n        axisTop={null}\n        axisRight={null}\n        axisBottom={{\n            format: '%a %m/%e',\n            tickValues: 'every day',\n            legendOffset: -12,\n            orient: 'bottom',\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            ...axisBottom,\n        }}\n        axisLeft={{\n            orient: 'left',\n            tickSize: 5,\n            tickValues: 7,\n            tickPadding: 5,\n            tickRotation: 0,\n            legendOffset: -45,\n            legendPosition: 'middle',\n            ...axisLeft,\n        }}\n        colors={{ scheme: 'nivo' }}\n        lineWidth={2}\n        enablePoints={false}\n        enableArea={true}\n        areaOpacity={0.5}\n        useMesh={true}\n        enableSlices='x'\n        sliceTooltip={(slice) => {\n            return <div style={{\n                paddingTop: '2px',\n                paddingBottom: '2px',\n                paddingLeft: '4px',\n                paddingRight: '4px',\n                backgroundColor: '#fff',\n                border: '1px solid #eee',\n            }}>\n                <Typography variant='subtitle2'>\n                {slice.slice.points[0].data.yFormatted} @ {moment(slice.slice.points[0].data.x).format('hA')}\n                </Typography>\n            </div>\n        }}\n        {...props}\n    />\n}","import React, {useState, useEffect} from 'react';\nimport moment from 'moment';\nimport WeatherLine from './WeatherLine';\nimport {CtoF} from './util';\n\nexport default function HourlyGraphs() {\n    const [hourlyForecast, setHourlyForecast] = useState<any>(undefined);\n\n    async function fetchHourlyForecast() {\n        const hourly = await fetch('https://api.weather.gov/gridpoints/MPX/109,70')\n            .then(res => res.json())\n            .then(res => res.properties);\n\n        // Convert windspeed from knots to mph\n        hourly.windSpeed.data = hourly.windSpeed.values.map((d: any) => {\n            return {\n                ...d,\n                x: moment(d.validTime.split('/')[0]).toDate(),\n                y: Math.round(d.value * 1.15078),\n            }\n        });\n\n        // Convert temp from C to F\n        hourly.temperature.data = hourly.temperature.values.map((d: any) => {\n            return {\n                ...d,\n                x: moment(d.validTime.split('/')[0]).toDate(),\n                y: CtoF(d.value),\n                value: CtoF(d.value),\n            }\n        });\n\n        hourly.skyCover.data = hourly.skyCover.values.map((d: any) => {\n            return {\n                ...d,\n                x: moment(d.validTime.split('/')[0]).toDate(),\n                y: d.value,\n            }\n        });\n\n        hourly.probabilityOfPrecipitation.data = hourly.probabilityOfPrecipitation.values.map((d: any) => {\n            return {\n                ...d,\n                x: moment(d.validTime.split('/')[0]).toDate(),\n                y: d.value,\n            }\n        });\n\n        // Nivo needs an id\n        hourly.windSpeed['id'] = 'windSpeed';\n        hourly.skyCover['id'] = 'skyCover';\n        hourly.temperature['id'] = 'temperature';\n        hourly.probabilityOfPrecipitation['id'] = 'probabilityOfPrecipitation';\n\n        setHourlyForecast(hourly);\n    }\n\n    useEffect(() => {\n        fetchHourlyForecast();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    if (!hourlyForecast) return null;\n\n    const height = '200px';\n\n\n    const times = hourlyForecast.temperature.data.map((d: any) => moment(d.x))\n    const minDay = moment.min(...times).startOf('day').add(1, 'day');\n    const maxDay = moment.max(...times).startOf('day');\n\n    const range = maxDay.diff(minDay, 'days');\n    const days = [minDay.toDate()]\n\n    for (let i = 1; i <= range; i++) {\n        days.push(minDay.clone().add(i, 'days').toDate())\n    }\n\n    return <div>\n        <div style={{height}}>\n            <WeatherLine\n                data={[hourlyForecast.temperature]}\n                areaBaselineValue={Math.min(...hourlyForecast.temperature.data.map((d: any) => d.value)) - 10}\n                yScale={{\n                    type: 'linear',\n                    min: Math.min(...hourlyForecast.temperature.data.map((d: any) => d.value)) - 10,\n                    max: Math.max(...hourlyForecast.temperature.data.map((d: any) => d.value)) + 10,\n                }}\n                yFormat={(value) => `${value}°F`}\n                axisLeft={{\n                    legend: 'Degrees F',\n                    format: (value) => `${value}°`,\n                }}\n                axisBottom={{tickValues: days}}\n                colors={'#ff8833'}\n            />\n        </div>\n\n        <div style={{height}}>\n            <WeatherLine\n                data={[hourlyForecast.skyCover]}\n                yFormat={(value) => `${value}%`}\n                yScale={{\n                    type: 'linear',\n                    min: 0,\n                    max: 100,\n                }}\n                axisLeft={{\n                    legend: 'Cloud cover',\n                    tickValues: [0, 25, 50, 75, 100],\n                    format: (value) => `${value}%`,\n                }}\n                axisBottom={{tickValues: days}}\n                colors={'#a3a3a3'}\n            />\n        </div>\n\n        <div style={{height}}>\n            <WeatherLine\n                data={[hourlyForecast.probabilityOfPrecipitation]}\n                yFormat={(value) => `${value}%`}\n                yScale={{\n                    type: 'linear',\n                    min: 0,\n                    max: 100,\n                }}\n                axisLeft={{\n                    legend: 'Chance of Precip',\n                    tickValues: [0, 25, 50, 75, 100],\n                    format: (value) => `${value}%`,\n                }}\n                axisBottom={{tickValues: days}}\n                colors={'#15aadc'}\n            />\n        </div>\n\n        <div style={{height}}>\n            <WeatherLine\n                data={[hourlyForecast.windSpeed]}\n                yFormat={(value) => `${value} mph`}\n                yScale={{\n                    type: 'linear',\n                    min: 0,\n                    max: Math.max(...hourlyForecast.windSpeed.data.map((d: any) => d.value)) + 2,\n                }}\n                axisLeft={{legend: 'Wind Speed (mph)'}}\n                axisBottom={{tickValues: days}}\n                colors={'#15aadc'}\n                enableArea={false}\n            />\n        </div>\n    </div>\n}","import React from 'react';\nimport './App.css';\n\nimport Forecast from './Forecast';\nimport CurrentConditions from './CurrentConditions';\nimport HourlyGraphs from './HourlyGraphs';\n\n// const precipRegex = new RegExp(/Chance of precipitation is (\\d+)%./g);\n\nfunction App() {\n\n  return (\n    <div className=\"App\" style={{maxWidth: '1000px', margin: '0 auto', padding: '25px'}}>\n      <CurrentConditions/>\n      <Forecast/>\n      <HourlyGraphs/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}